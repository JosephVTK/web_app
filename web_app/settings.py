"""
Django settings for web_app project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

if not os.getenv('LOAD_ENV', 'False') == "True":
    print("Please create .env file first.")
    raise FileNotFoundError('No .env file found.')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == "True"

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')

# Application definition
OEM_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps'
]

THIRD_PARTY_APPS = [
    'debug_toolbar',
    'corsheaders',
    'rest_framework',
]

MY_APPS = [
    'account.apps.AccountConfig',
    'user_profile.apps.UserProfileConfig',
    'blog.apps.BlogConfig',
    'document.apps.DocumentConfig',
    'core_app.apps.CoreAppConfig',
]

INSTALLED_APPS = OEM_APPS + THIRD_PARTY_APPS + MY_APPS

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'web_app.urls'

if "account.apps.AccountConfig" in MY_APPS:
    from account.settings import *
    AUTH_USER_MODEL = 'account.User'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# Configuration Settings
USING_DB = os.getenv('USING_DB', 'sqlite')

def get_value(value):
	if not value:
		return value
	if value[0] != '^':
		return value
	value = value[1:]
	
	if value.lower() == 'true':
		return True
	if value.lower() == 'false':
		return False
	if value.isdigit():
		return int(value)

DATABASE_OPTIONS = { 
    key_value_pair.split(':')[0] : get_value(key_value_pair.split(':')[1]) 
    for key_value_pair 
    in os.getenv('DATABASE_OPTIONS', "").split(',')
    if key_value_pair.find(':') != -1
    }

DATABASE_NAME = os.getenv('DATABASE_NAME')
DATABASE_USER = os.getenv('DATABASE_USER')
DATABASE_PASSWORD = os.getenv('DATABASE_PASSWORD')
DATABASE_HOST = os.getenv('DATABASE_HOST')
DATABASE_PORT = os.getenv('DATABASE_PORT', '')

if USING_DB == 'sqlite':
    DATABASE_ENGINE = os.getenv('DATABASE_ENGINE', 'django.db.backends.sqlite3')
    DATABASE_NAME = os.getenv('DATABASE_NAME', BASE_DIR / 'db.sqlite3')
else:
    if USING_DB == 'mysql':
        DATABASE_ENGINE = os.getenv('DATABASE_ENGINE', 'django.db.backends.mysql')
    elif USING_DB == 'postgres':
        DATABASE_ENGINE = os.getenv('DATABASE_ENGINE', 'django.db.backends.postgresql_psycopg2')

# Safety Checks
if not DATABASE_ENGINE:
    raise LookupError(f"No DATABASE_ENGINE detected. Running {USING_DB}.")
if not DATABASE_NAME:
    raise LookupError(f"No DATABASE_NAME detected. Running {USING_DB}.")

if USING_DB != 'sqlite':
    if not DATABASE_USER:
        raise LookupError(f"No DATABASE_USER detected. Running {USING_DB}.")
    if not DATABASE_PASSWORD:
        raise LookupError(f"No DATABASE_PASSWORD detected. Running {USING_DB}.")
    if not DATABASE_HOST:
        raise LookupError(f"No DATABASE_HOST detected. Running {USING_DB}.")

DATABASES = {
    'default': {
        'ENGINE': DATABASE_ENGINE,
        'OPTIONS': DATABASE_OPTIONS,
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': DATABASE_HOST,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = "profile_detail"

ADMIN_SITE_HEADER = os.getenv('ADMIN_SITE_HEADER')
ADMIN_SITE_TITLE = os.getenv('ADMIN_SITE_TITLE')
ADMIN_SITE_INDEX_TITLE = os.getenv('ADMIN_SITE_INDEX_TITLE')


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

STATIC_URL = 'static/'
MEDIA_URL = 'media/'

FILE_ROOT = os.getenv('FILE_ROOT', BASE_DIR)
STATIC_ROOT = os.path.join(FILE_ROOT, 'static/')
MEDIA_ROOT = os.path.join(FILE_ROOT, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = 'account/tmp/emails'  # change this to a proper location

USE_API = True
USE_SITEMAPS = True
USE_ROBOTS = True

# Sites Framework
SITE_ID = 1
